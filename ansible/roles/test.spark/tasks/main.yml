---
- set_fact: sparkdirectory="~/spark-streaming" podname="spark-streaming" registry="{{ DOCKER_USER }}"

- name: System - create directory
  file:
    path: "{{ sparkdirectory }}"
    state: directory
  
- name: System - Upload Dockerfile template
  template:
    src: "files/Dockerfile"
    dest: "{{ sparkdirectory }}"
  
- name: System - Upload files
  copy:
    src: "{{ item }}"
    dest: "{{ sparkdirectory }}"
  with_fileglob:
  - "files/spark.py"
  - "files/requirements.txt"

- name: System - install python module
  pip:
    name: "{{ item }}"
  with_items:
  - "docker"
  - "k8s"
  - "kubernetes"
  - "docker-compose"

- name: "Docker - login docker registry {{ registry }}/"
  docker_login: username="{{ DOCKER_USER }}" password="{{ DOCKER_PASS }}"

- name: Docker - build image
  community.docker.docker_image:
    name: "{{ podname }}"
    repository: "{{ registry }}/{{ podname }}"
    build:
      path:  "{{ sparkdirectory }}"
    source: build
    push: yes
    force_absent: true
    force_tag: true
    force_source: true

- name: k8s - delete legacy pods
  shell: "kubectl --namespace {{ K8S_DEFAULE_NAMESPACE }} delete pods -l purpose=test-spark || true"

- name: k8s - create pod template
  template:
    dest: "~/pod-{{ podname }}.yml"
    src: "pod-{{ podname }}.yml.j2"

- name: k8s - create pod
  shell: "kubectl --namespace {{ K8S_DEFAULE_NAMESPACE }} apply -f ~/pod-{{ podname }}.yml"

# use Dockerfile CMD instead
# - name: k8s - run spark.py
#   kubernetes.core.k8s_exec:
#     namespace: "{{ K8S_DEFAULE_NAMESPACE }}"
#     pod: "{{ podname }}"
#     command: "python3 spark.py"

- name: k8s - Wait for 30sec
  wait_for: "timeout=30"

- name: k8s - read pod log and verify if spark success run
  shell: "kubectl --namespace {{ K8S_DEFAULE_NAMESPACE }} logs {{ podname }}"
  register: result
  failed_when: "'@user' not in result.stdout"
  ignore_errors: true

# - name: k8s - read spark log
#   kubernetes.core.k8s_log:
#     name: "{{ podname }}"
#     namespace: "{{ K8S_DEFAULE_NAMESPACE }}"
#   register: result
#   failed_when: "'@user' not in result.log"
#   ignore_errors: true

# - debug: var="{{ result }}"

- name: k8s - delete pod
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: "{{ K8S_DEFAULE_NAMESPACE }}"
    name: "{{ podname }}"

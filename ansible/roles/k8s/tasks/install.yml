# Pi
# /boot/cmdline.txt
# cgroup_enable=memory å’Œ cgroup_memory=1

- service_facts:
  register: services
  
- set_fact: hasSnapd="{{ 'snapd' in services }}"

- name: enable snapd
  systemd:
    name: snapd
    enabled: true
    state: started
  when: hasSnapd

- name: create snapd symbolic link
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  when: hasSnapd

- name: Create containerd config file
  file:
    path: "/etc/modules-load.d/containerd.conf"
    state: "touch"
  when:
  - groups.external is not defined or inventory_hostname not in groups['external']
  ignore_errors: true

- name: Add conf for containerd
  blockinfile:
    path: "/etc/modules-load.d/containerd.conf"
    block: |
      overlay
      br_netfilter
  when:
  - groups.external is not defined or inventory_hostname not in groups['external']
  
- name: Modprobe
  shell: |
    mobprobe overlay
    modprobe br_netfilter
  when:
  - groups.external is not defined or inventory_hostname not in groups['external']

- name: Set system configurations for k8s
  file:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    state: "touch"

- name: Add conf for containerd
  blockinfile:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    block: |
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply new settings
  command: sysctl --system

- name: install docker
  shell: |
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
  when: isCentOS

- name: config containerd
  shell: |
    mkdir -p /etc/containerd
    containerd config default | sudo tee /etc/containerd/config.toml
    systemctl restart containerd
  when: groups.external is not defined or inventory_hostname not in groups['external']
  ignore_errors: true

- name: Disable swap
  shell: |
    swapoff -a
    sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

- name: install and configure dependencies
  shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  when: not isCentOS

- name: RHEL import gpg key
  shell: |
    rpm --import https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  when: isCentOS

- set_fact: k8s_sourcelist="/etc/apt/sources.list.d/kubernetes.list"
  when: not isCentOS

- name: Create k8s repo file
  file:
    path: "{{ k8s_sourcelist }}"
    state: "touch"
  when: not isCentOS

- name: RHEL add k8s repo
  yum_repository:
    name: kubernetes
    gpgcheck: yes
    repo_gpgcheck: no
    description: for kubernetes
    enabled: yes
    file: k8s_repo
    baseurl: "https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64"
  when: isCentOS

- name: Add k8s source
  blockinfile:
    path: "{{ k8s_sourcelist }}"
    block: |
      deb https://apt.kubernetes.io/ kubernetes-xenial main
  when: not isCentOS

- name: apt update
  apt:
    update_cache: true
  when: isUbuntu

- name: Install k8s
  package:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - kubelet
    - kubeadm
    - kubectl

- name: Install helm by snapd
  snap:
    name: helm
    classic: true
  when: hasSnapd

- name: Install helm by using script
  shell: |
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  environment:
    VERIFY_CHECKSUM: "false"
  when: not hasSnapd
  
- name: Turn off firewall
  ansible.builtin.systemd:
    state: stopped
    name: firewalld
    enabled: no
  when: is_cent_os

- name: Turn off selinux temporary
  ansible.builtin.command: setenforce 0
  no_log: true
  failed_when: false
  when: is_cent_os

- name: Turn off selinux forever
  ansible.builtin.lineinfile:
    path: "/etc/selinux/config"
    regexp: '^SELINUX=(.*)$'
    line: 'SELINUX=disabled'
    backup: yes
  when: is_cent_os

- name: Pi4 - cgroup read cmdline.txt
  ansible.builtin.command: "cat /boot{{ '/firmware' if is_ubuntu_os else '' }}/cmdline.txt"
  register: cmdline

- name: Pi4 - cgroup split as list
  ansible.builtin.set_fact:
    cmds: "{{ cmdline.stdout | split(' ') }}"
    cmds_filter: []

- name: Pi4 - cgroup filter 
  ansible.builtin.set_fact:
    cmds_filter: "{{ cmds_filter + [item] }}"
  with_items: "{{ cmds }}"
  when:
  - "'cgroup_enable' not in item"
  # - "'cgroup_memory' not in item"

- name: Pi4 - cgroup init var
  ansible.builtin.set_fact:
    list_cmds: "{{ cmds_filter }}"

- name: Pi4 - cgroup add into cmdline.txt
  ansible.builtin.set_fact:
    list_cmds: "{{ list_cmds + [item] }}"
  with_items:
  - "cgroup_enable=memory"
  - "cgroup_enable=cpuset"
  # - "cgroup_memory=1"

- name: Pi4 - final pi cmdline.txt
  ansible.builtin.set_fact: cmdline="{{ list_cmds | join(' ') }}"

- name: Pi4 - debug
  ansible.builtin.debug: msg="{{ cmdline }}"

- name: Pi4 - set cgroup
  ansible.builtin.lineinfile:
    path: "/boot{{ '/firmware' if is_ubuntu_os else '' }}/cmdline.txt"
    regexp: '{{ list_cmds[0] }}'
    line: "{{ cmdline }}"
    mode: 0755
  register: chg_cgroup

- name: Reboot if Pi4 /cmdline.txt changed
  ansible.builtin.reboot:
    msg: "Reboot initiated."
    reboot_timeout: 300
    connect_timeout: 5
    test_command: whoami
  when: chg_cgroup.changed